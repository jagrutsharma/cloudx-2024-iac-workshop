AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Exploring AWS CloudFormation

Globals:
  Function:
    Timeout: 300
    Runtime: nodejs16.x
    MemorySize: 256

Resources:

  ClickEventApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ClickEventApi
      StageName: dev

  UserSignalsStream:
    Type: AWS::Kinesis::Stream
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: user-signals-stream
      ShardCount: 1
      RetentionPeriodHours: 24
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      Tags:
        - Key: Environment
          Value: Development

  DestinationBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: user-signals-destination-bucket
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Environment
          Value: Development

  EventProcessorLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: KinesisWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                Resource: !GetAtt UserSignalsStream.Arn

  EventProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/lambda/event-processor/event-processor-lambda.handler
      FunctionName: event-processor-lambda
      Description: Lambda function to write events to Kinesis stream
      Role: !GetAtt EventProcessorLambdaExecutionRole.Arn
      Runtime: nodejs16.x
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          USER_SIGNALS_STREAM: !Ref UserSignalsStream
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /click
            Method: post
            RestApiId: !Ref ClickEventApi

  EventProcessorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: /aws/lambda/event-processor-lambda
      RetentionInDays: 14
      Tags:
        - Key: Environment
          Value: Development

  FirehoseDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FirehoseDeliveryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${DestinationBucket}/*
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                Resource: !GetAtt UserSignalsStream.Arn
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:log-group:/aws/kinesisfirehose/user-signals-firehose:log-stream:*

  UserSignalsFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DeliveryStreamName: user-signals-firehose
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt UserSignalsStream.Arn
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DestinationBucket.Arn
        RoleARN: !GetAtt FirehoseLambdaExecutionRole.Arn
        Prefix: user-signals/
        BufferingHints:
          SizeInMBs: 1
          IntervalInSeconds: 30
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          NoEncryptionConfig: NoEncryption
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt FirehoseTransformationLambda.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: /aws/kinesisfirehose/user-signals-firehose
          LogStreamName: S3Delivery

  FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: /aws/kinesisfirehose/user-signals-firehose
      RetentionInDays: 14
      Tags:
        - Key: Environment
          Value: Development

  UserAnonymizationTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: UserAnonymizationTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH   # Primary key
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: Development   

  FirehoseTransformationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/lambda/firehose-transformation/firehose-transformation-lambda.handler
      FunctionName: firehose-transformation-lambda
      Description: Lambda function to anonymize user data
      Role: !GetAtt FirehoseTransformationLambdaExecutionRole.Arn
      Runtime: nodejs16.x
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          USER_ANONYMIZATION_TABLE: !Ref UserAnonymizationTable

  FirehoseTransformationLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: /aws/lambda/firehose-transformation-lambda
      RetentionInDays: 14
      Tags:
        - Key: Environment
          Value: Development

  FirehoseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FirehoseLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt FirehoseTransformationLambda.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${DestinationBucket}/*

  FirehoseTransformationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FirehoseTransformationLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${DestinationBucket}/*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                Resource: arn:aws:dynamodb:us-east-1:722323574575:table/UserAnonymizationTable